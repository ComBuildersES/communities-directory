import{bE as v,ge as S,K as c,fS as w,f6 as y,cH as b,f4 as k,gf as E,fu as $,be as C,gg as F,c0 as P,gh as g,bb as A,c1 as G,aS as H,d_ as I,e$ as O,dD as R,a1 as a,a2 as l,a3 as Z}from"./index-B_4TRAtg.js";import{t as x}from"./memoize-DmxaQ-k8.js";import{a as L}from"./normalizeUtilsSync-DEyjKflT.js";import{s as z}from"./featureConversionUtils-B6sRBsr8.js";import{u as M}from"./executeQueryForSnapping-BQ1-RH6g.js";import{f as W}from"./FeatureStore-CdjHyBoo.js";import{L as N}from"./QueryEngine-B_xOxMOR.js";import{y as j}from"./elevationInfoUtils-BRrcnzZu.js";import{E as q,y as T}from"./SketchOptions-Bx-tmA7Q.js";import{o as D,i as J}from"./queryEngineUtils-9NhB8lvo.js";import{i as m,r as U,n as f}from"./symbologySnappingCandidates-Bo7k-IQS.js";import"./timeSupport-Csmg0__F.js";import"./BoundsStore-Baoex70r.js";import"./PooledRBush--VzosGNA.js";import"./optimizedFeatureQueryEngineAdapter-BhikZY0v.js";import"./WhereClauseCache-BZtOPqrx.js";import"./WhereClause-DN-FYiA6.js";import"./QueryEngineCapabilities-B_pTbIiR.js";import"./SnappingCandidate-DGkpYqI6.js";import"./geodesicUtils-CUdqCw40.js";import"./plane-CDxgE0WQ.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-Wu0Q7flO.js";import"./projectVectorToVector-CCjV-3HE.js";import"./projectPointToVector-BW-YfeKO.js";import"./RouteLayerInteraction-rhJeTOKo.js";import"./GraphicsLayer-CE1wS3Mu.js";import"./Stop-C0xE1WHX.js";import"./networkEnums-DorpSj2T.js";import"./VertexSnappingCandidate-B3v-jbiN.js";import"./PointSnappingHint-3wMazcvU.js";const _="graphics-collections";let n=class extends v{get updating(){return this._updatingHandles.updating}get _hasZ(){const e=this.view;return e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d";if(!i||t.type==="map-notes")return m();const s=async(o,r)=>(await S(e.whenLayerView(t),r)).elevationAlignPointsInFeatures(o,r);return m(i,{elevationInfo:t.elevationInfo,alignPointsInFeatures:s})}get _snappingElevationFilter(){const{view:e}=this,t=e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return U(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d",s=this._extrudedPolygonSymbolsCount>0;return i&&t.type!=="map-notes"&&s?f(s,async(o,r)=>{const p=await e.whenLayerView(t);return c(r),p.queryForSymbologySnapping({candidates:o,spatialReference:e.spatialReference},r)}):f()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0,this._updatingHandles=new w,this._memoizedMakeGetGroundElevation=x(J)}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e)),this._updatingHandles.destroy()}initialize(){this._updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this._updatingHandles.removeHandles(_);for(const s of i)this._addMany(s.graphics.toArray()),this.addHandles([s.on("graphic-update",o=>this._onGraphicUpdate(o)),this._updatingHandles.addOnCollectionChange(()=>s.graphics,o=>this._onGraphicsChanged(o))],_)},y);const{view:e}=this,{layer:t}=this.layerSource;e!=null&&e.type==="3d"&&t.type!=="map-notes"&&e.elevationProvider&&this.addHandles([e.elevationProvider.on("elevation-change",({context:i})=>{j(i,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),b(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),y),k(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:i,coordinateHelper:{spatialReference:s}}=e,o=await E(this._mapSources(d=>this._fetchCandidatesForSource(d,e,t)));c(t);const r=this._memoizedMakeGetGroundElevation(this.view,s),p=o.flat().map(d=>D(d,r));return q(i,p),p}async _fetchCandidatesForSource(e,t,i){var u;const s=T(t,((u=this.view)==null?void 0:u.type)??"2d"),o=await M(e.queryEngine,s,i);c(i);const r=await this._snappingElevationAligner.alignCandidates(o.candidates,t.coordinateHelper.spatialReference,i);c(i);const p=await this._symbologySnappingFetcher.fetch(r,i);c(i);const d=p.length===0?r:[...r,...p];return this._snappingElevationFilter.filter(s,d)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],i=new Map;for(const s of e)s.geometry!=null&&(this._needsInitializeProjection(s.geometry.spatialReference)?(t.push(s.geometry.spatialReference),i.set(s.uid,s)):this._add(s));this._createPendingAdd(t,i)}_createPendingAdd(e,t){if(!e.length)return;const i=$(async r=>{await C(e.map(p=>({source:p,dest:this.spatialReference})),{signal:r}),this._markLoadedSpatialReferences(e);for(const p of t.values())this._add(p)});this._updatingHandles.addPromise(i.promise);const s={task:i,graphics:t},o=()=>F(this._pendingAdds,s);i.promise.then(o,o),this._pendingAdds.push(s)}_markLoadedSpatialReferences(e){for(const t of e){t.wkid!=null&&this._loadedWkids.add(t.wkid);const i=t.wkt2||t.wkt;i&&this._loadedWkts.add(i)}}_add(e){if(e.geometry==null||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=P.fromExtent(t));const i=this._ensureSource(t.type);if(i==null)return;const s=this._createOptimizedFeature(e.uid,t);s!=null&&(i.featureStore.add(s),g(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){if(e.wkid!=null&&this._loadedWkids.has(e.wkid))return!1;const t=e.wkt2||e.wkt;return(!t||!this._loadedWkts.has(t))&&!A(e,this.spatialReference)}_createOptimizedFeature(e,t){const i=G(L(t),this.spatialReference);if(!i)return null;const s=this._ensureGeometryHasZ(i),o=z(s,this._hasZ,!1);return new H(o,{[h]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t=s=>{for(;s.length<3;)s.push(0)},i=e.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(t);break;case"polyline":i.paths.forEach(s=>s.forEach(t));break;case"polygon":i.rings.forEach(s=>s.forEach(t))}return i}_ensureSource(e){const t=this._sources[e];if(t!=null)return t;const i=this._createSource(e);return this._sources[e]=i,i}_createSource(e){const t=I.toJSON(e),i=this._hasZ,s=new W({geometryType:t,hasZ:i,hasM:!1});return{featureStore:s,queryEngine:new N({featureStore:s,fieldsIndex:R.fromLayerJSON({fields:[{name:h,type:"esriFieldTypeOID",alias:h}]}),geometryType:t,hasM:!1,hasZ:i,objectIdField:h,spatialReference:this.spatialReference,priority:O.SNAPPING,scheduler:this.view!=null&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const i=t.uid;e.featureStore.has(i)&&(e.featureStore.removeById(t.uid),g(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:i,polyline:s,multipoint:o}=this._sources,r=[];return t!=null&&r.push(e(t)),i!=null&&r.push(e(i)),s!=null&&r.push(e(s)),o!=null&&r.push(e(o)),r}};a([l()],n.prototype,"getGraphicsLayers",void 0),a([l({constructOnly:!0})],n.prototype,"layerSource",void 0),a([l({constructOnly:!0})],n.prototype,"spatialReference",void 0),a([l({constructOnly:!0})],n.prototype,"view",void 0),a([l({readOnly:!0})],n.prototype,"updating",null),a([l({readOnly:!0})],n.prototype,"availability",void 0),a([l()],n.prototype,"_hasZ",null),a([l()],n.prototype,"_snappingElevationAligner",null),a([l()],n.prototype,"_snappingElevationFilter",null),a([l()],n.prototype,"_symbologySnappingFetcher",null),a([l()],n.prototype,"_extrudedPolygonSymbolsCount",void 0),n=a([Z("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],n);const h="OBJECTID";export{n as GraphicsSnappingSource};
