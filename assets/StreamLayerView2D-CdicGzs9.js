import{a1 as s,a2 as o,iz as _,a3 as m,cH as u,s as h,hH as g,bJ as f,cE as l,fx as v}from"./index-B_4TRAtg.js";import{n as S,d as C}from"./FeatureLayerView2D-BYTFpq7s.js";import"./Container-C-fyENPt.js";import"./featureConversionUtils-B6sRBsr8.js";import"./timeSupport-t2cWZIoa.js";import"./AttributeBinsFeatureSet-D8f_ZoUm.js";import"./LayerView-N1mrxIDg.js";import"./TechniqueInstance-CkdrbjC4.js";import"./UpdateTracking2D-C99EnYyn.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-BHS-L3iC.js";import"./rasterizingUtils-Chlfi8E5.js";import"./floatRGBA-CMcbCDFA.js";import"./dataViewUtils-DOrnR5cM.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-DQ2WNHB0.js";import"./VertexArrayObject-B0c8_e53.js";import"./TileContainer-DxmzsJz-.js";import"./WGLContainer-DNWApb-S.js";import"./ProgramTemplate-B0zdkpDC.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-n0NLhqWb.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-D-DyqZvU.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-BVq0e6Of.js";import"./ShaderBuilder-Crqy4gJ1.js";import"./BindType-BBwFZqyN.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-bPPZ3veD.js";import"./CircularArray-CujHzHWW.js";import"./SDFHelper-B77aQbIR.js";import"./constants-B4mRqufT.js";import"./parquet-CmngwWFq.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-2hLorZmc.js";import"./RefreshableLayerView-ac9mdUd7.js";const P=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:_})],t.prototype,"filter",void 0),t=s([m("esri.views.layers.StreamLayerView")],t),t};let n=class extends P(C){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([u(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),u(()=>this.layer.purgeOptions,()=>this._update()),u(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new h("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return g(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return f(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new h("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return S(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(y=>{const c=l.fromJSON(y);return c.features.forEach(d=>{d.layer=this.layer,d.sourceLayer=this.layer}),c}),new l({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(v)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],n.prototype,"pipelineConnectionStatus",void 0),s([o()],n.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],n.prototype,"connectionError",null),s([o({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=s([m("esri.views.2d.layers.StreamLayerView2D")],n);const ae=n;export{ae as default};
