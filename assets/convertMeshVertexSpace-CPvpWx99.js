import{K as s,s as m,U as p}from"./index-B_4TRAtg.js";import{p as n}from"./MeshVertexAttributes-CHFIXEPH.js";import{B as l}from"./vertexSpaceConversion-CBeDtben.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-BKwBmQfp.js";import"./computeTranslationToOriginAndRotation-Dqjo0Ofk.js";import"./projectPointToVector-BW-YfeKO.js";import"./meshVertexSpaceUtils-H3gh9Icv.js";import"./MeshLocalVertexSpace-DisUgqaj.js";import"./vec3-D_3AOIgW.js";import"./BufferView-TYl1GUpS.js";import"./vec4-CobkZpF_.js";async function M(t,o,r){await Promise.resolve(),s(r);const e=l(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
