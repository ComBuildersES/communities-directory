import{s as r,hS as w,hT as v,hU as m,hV as h,hW as q,hX as c,hY as x}from"./index-B_4TRAtg.js";function g(e,s){if(!e.view)throw new r(`${s}:missing-parameters`,"'view' parameter is required for binning");if(e.sqlExpression)throw new r(`${s}:invalid-parameters`,"'sqlExpression' parameter is not supported for binning");if(e.view.type==="3d")throw new r(`${s}:invalid-parameters`,"3d view is not supported for binning")}async function E(e){if(!(e!=null&&e.layer)||!e.field&&!e.valueExpression)throw new r("unique-values:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");const s=e.valueExpression||e.sqlExpression,n=s&&!e.sqlExpression;if(s){if(n){if(!e.view)throw new r("unique-values:missing-parameters","View is required when 'valueExpression' is specified")}else if(!e.valueExpression)throw new r("unique-values:missing-parameters","'valueExpression' parameters are required")}e.forBinning&&g(e,"unique-values");const{layer:p,...f}=e,t=e.forBinning?w:v,a=m(p,t,e.forBinning);if(!a)throw new r("unique-values:invalid-parameters","'layer' must be one of these types: "+h(t).join(", "));const i={layerAdapter:a,...f},u=i.signal!=null?{signal:i.signal}:null;await a.load(u);const d=await q({field:i.field,field2:i.field2,field3:i.field3,valueExpression:i.valueExpression}),l=c(a,d,"unique-values:invalid-parameters");if(l)throw l;i.filter&&!i.filter.spatialRelationship&&(i.filter.spatialRelationship="intersects");const o=x(i.filter,"summary-statistics:invalid-parameters");if(o)throw o;return i}async function b(e){const{layerAdapter:s,...n}=await E(e);return s.uniqueValues(n)}export{b as default};
